/***********************************************************************/
/*                                                                     */
/*  FILE        :comA1andA2.hpp                                        */
/*  DATE        :Oct. 19, 2019                                         */
/*  DESCRIPTION :ROSロボ Arduino1-Arduino2間通信用プログラムヘッダ     */
/*                                                                     */
/*  This file is generated by Tatsuya Miyazaki                         */
/*                                                                     */
/***********************************************************************/

#ifndef _COM_A1_AND_A2_HPP__
#define _COM_A1_AND_A2_HPP__

#include <Arduino.h>
// 待ち行列関数
#include "queue.hpp"

/*
#include "fix.hpp"
typedef struct arduino1_state{
  fix omega_right;
  fix omega_left;
  fix vel_right;
  fix vel_left;
} arduino1StateType;
*/

/***********************************************************************/
/*                          comA1andA2変数                             */
/***********************************************************************/

//#ifndef _COM_P_AND_A1_H__
#define STX 0x90            // スタートバイト
#define ETX 0xA0            // エンドバイト
//#define ACTIVE_CMD 0xD0     // アクティブコマンド
//#define READY_CMD 0xE0      // Ready通知コマンド
//#endif

//#define SENDRQ_CMD 0xD1     // 送信要求コマンド
#define SLAVE 0             // スレーブ
#define MASTER 1            // マスター

#define SIZE_OF_CODE2 17    // 1パケットのバイト数

// Arduino2の状態量構造体
typedef struct arduino2_state {
  int32_t encR;
  int32_t encL;
  uint32_t time;  // 内部時間 [ms]
  //int32_t time;  // 内部時間 [ms]
} arduino2StateType;

// 32bitデータを分割送信するための共用体
typedef union int32u {
  int32_t cnt32;
  struct{
    byte b31to25:7;
    byte b24to18:7;
    byte b17to11:7;
    byte b10to04:7;
    byte b03to00:4;
  } cnt7;
} int32uType;

// 符号なし32bitデータを分割送信するための共用体
typedef union uint32u {
  uint32_t cnt32;
  struct{
    byte b31to25:7;
    byte b24to18:7;
    byte b17to11:7;
    byte b10to04:7;
    byte b03to00:4;
  } cnt7;
} uint32uType;

// 初期化
void initComA1andA2(uint8_t select);
// マスター側の送信動作（Arduino2）
uint8_t i2cMasterTransmit(arduino2StateType a2st);
// スレーブ側の受信割込み動作（Arduino1）
void i2cRecieveInterrupt(void);
// スレーブ側の受信動作（Arduino1）
uint8_t i2cSlaveRecieve(arduino2StateType *A2state);
// I2Cで受信データが更新されたかどうか
uint8_t isI2Crecieved(void);

#endif
