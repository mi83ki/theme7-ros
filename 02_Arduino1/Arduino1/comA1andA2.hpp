/***********************************************************************/
/*                                                                     */
/*  FILE        :comA1andA2-r00.hpp                                    */
/*  DATE        :Oct. 19, 2019                                         */
/*  DESCRIPTION :ROSロボ Arduino1-Arduino2間通信用プログラムヘッダ     */
/*                                                                     */
/*  This file is generated by Tatsuya Miyazaki                         */
/*                                                                     */
/*  メモ：                                                             */
/*        R00：新規作成                                                */
/*                                                                     */
/***********************************************************************/

#ifndef _COM_A1_AND_A2_HPP__
#define _COM_A1_AND_A2_HPP__

#include <Arduino.h>
// 待ち行列関数
//#include "queue.h"
/***********************************************************************/
/*                                                                     */
/*  FILE        :queue.h                                               */
/*  DATE        :Wed, Jun 14, 2009                                     */
/*  DESCRIPTION :Queue Program's header                                */
/*  CPU TYPE    :SH7047                                                */
/*                                                                     */
/*  This file is generated by Tatsuya Miyazaki                         */
/*                                                                     */
/***********************************************************************/

/************** FIFOの使い方 ***************

1. FIFOをつくる
  char buf[101] = {0};
	queueType queue1 = {buf, 100, 0, 0, "queue1"};

2. 値を入れる
	enqueue(FIFOポインタ, 入れる値);

3. 値を出す
	値 = dequeue(FIFOポインタ);

4. FIFOが空っぽかどうか調べる
	if(isQueueEmpty(FIFOポインタ))

5. FIFOが満タンかどうか調べる
	if(isQueueFull(FIFOポインタ))

*******************************************/

#ifndef _QUEUE_H__
#define _QUEUE_H__
//#include <arduino.h>

typedef byte queue_t;	/* 格納データの型 */

typedef struct queue {
  queue_t *data;				/* データ格納用の配列を指すポインタ */
  uint16_t size;				/* データ格納用配列のサイズ */
  uint16_t front;				/* 待ち行列の先頭の位置 */
  uint16_t rear;				/* 待ち行列の末尾の次の位置 */
  int8_t name[11];					/* 待ち行列の名前 */
} queueType;

uint16_t queueNext(uint16_t n, uint16_t size);
uint8_t isQueueEmpty(queueType *que);
uint8_t isQueueFull(queueType *que);
uint8_t enqueue(queueType *que, queue_t x);
queue_t dequeue(queueType *que);
int8_t *getQueueName(queueType *que);

#endif


/***********************************************************************/
/*                          comA1andA2変数                             */
/***********************************************************************/

//#ifndef _COM_P_AND_A1_H__
#define STX 0x90            // スタートバイト
#define ETX 0xA0            // エンドバイト
//#define ACTIVE_CMD 0xD0     // アクティブコマンド
//#define READY_CMD 0xE0      // Ready通知コマンド
//#endif

//#define SENDRQ_CMD 0xD1     // 送信要求コマンド
#define SLAVE 0             // スレーブ
#define MASTER 1            // マスター

#define SIZE_OF_CODE2 17    // 1パケットのバイト数

// Arduino2の状態量構造体
typedef struct arduino2_state {
  int32_t encR;
  int32_t encL;
  uint32_t time;  // 内部時間 [ms]
  //int32_t time;  // 内部時間 [ms]
} arduino2StateType;

// 32bitデータを分割送信するための共用体
typedef union int32u {
  int32_t cnt32;
  struct{
    byte b31to25:7;
    byte b24to18:7;
    byte b17to11:7;
    byte b10to04:7;
    byte b03to00:4;
  } cnt7;
} int32uType;

// 符号なし32bitデータを分割送信するための共用体
typedef union uint32u {
  uint32_t cnt32;
  struct{
    byte b31to25:7;
    byte b24to18:7;
    byte b17to11:7;
    byte b10to04:7;
    byte b03to00:4;
  } cnt7;
} uint32uType;

void initComA1andA2(uint8_t select);
// マスター側の送信動作（Arduino2）
uint8_t i2cMasterTransmit(arduino2StateType a2st);
// スレーブ側の受信割込み動作（Arduino1）
void i2cRecieveInterrupt(void);
uint8_t i2cSlaveRecieve(arduino2StateType *A2state);
// I2Cで受信データが更新されたかどうか
uint8_t isI2Crecieved(void);

#endif
